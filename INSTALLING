    This file is part of OneModel, a program to manage knowledge.
    Copyright in each year of 2003 and 2010-2014 inclusive, Luke A Call; all rights reserved.
    OneModel is free software, distributed under a license that includes honesty, the Golden Rule, guidelines around binary
    distribution, and the GNU Affero General Public License as published by the Free Software Foundation, either version 3
    of the License, or (at your option) any later version.  See the file LICENSE for details.
    OneModel is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
    You should have received a copy of the GNU Affero General Public License along with OneModel.  If not, see <http://www.gnu.org/licenses/>

--------------------------------------------------------------------------------

Compiling, Installing and Running OneModel
======================================================

This document assumes you know how to become root (or administrator) on your system, edit files, and use a command prompt to change directories and type commands.  Also that you have downloaded and extracted, or git cloned, all the project files, in a known directory location (such as ~/onemodel).

If you run into problems and solve them, or can document this better than I have, please send a github pull request.


Compiling
---------
Compiling before installing is optional, but developers should have java & maven.

First you'll need a java SDK, like openJdk 1.7.  Then install maven (mvn).  These versions are known to work, on debian stable (wheezy) as of 2014-10:
    Apache Maven 3.0.4
    Java version: OpenJDK 1.7.0_65.

Then you have to get "jline2-om" from github (my fork w/ needed features, not merged as of 2014-12), probably "git checkout 3c735c2" (or the version needed per any error messages you get in the next step), and run "mvn install".

Then in the directory where you have onemodel, run
  mvn clean package -DskipTests=true
...which builds the .jar -- but it can't run until the other steps below are complete.
  

Installing
----------
Before installing postgresql, decide whether you want data checksums (requires postgresql 9.3 or higher; as of this writing I have only tested with 9.1).  If you do, you will need to take care of that yourself up front (these instructions don't include that).  At:
  https://wiki.postgresql.org/wiki/What%27s_new_in_PostgreSQL_9.3#Data_Checksums
...we learn: "It is now possible for PostgreSQL to checksum data pages and report corruption. This is a cluster-wide setting and cannot be applied to individual databases or objects. Also be aware that this facility may incur a noticeable performance penalty. This option must be enabled during initdb and cannot be changed (although there is a new GUC parameter 'ignore_checksum_failure' which will force PostgreSQL to continue processing a transaction even if corruption is detected)."


Install postgresql 9.1 (www.postgresql.org).  For Debian GNU/Linux and its derivatives that usually means (as root) running "aptitude install postgresql-9.1".  Non-linux users: you will have to adapt these instructions to fit your situation until more specifics are added. For convenience on Windows, you can install cygwin (www.cygwin.com), then use cygwin to install postgresql and run the rest of the commands.

Also install "postgresql-contrib-9.1". This is for the "large objects" support, aka a module called "lo".

Steps to be performed from a command prompt: 

- Make sure you have java in the path so you can run 
    java
  ...and see a bunch of output about usage.  Otherwise revisit the java installation instructions for putting it in your path.

- Become the root user (i.e., run "/bin/su -" and enter the root password), then edit the file
    /etc/postgresql/9.1/main/pg_hba.conf
  (or its equivalent on your system).  Add some configuration lines at the end, after where the file says "Put your actual configuration here", making sure there were no conflicting lines below them [should that say "ABOVE", not "below"?].  Replace <username> with the username you want to use to access your OneModel data (usually the same as your username on the computer; I don't know if spaces will work so omit them if your username has any):
  
#This works for postgresql 9.1
host    om_<username>   <username>    127.0.0.1/32    md5	
local   om_<username>   <username>    md5
host    om_testrunner   testrunner    127.0.0.1/32    password
local   om_testrunner   testrunner    password

  (Details for the interested:  There must be no conflicting lines below these, because when postgresql interprests the file there is no drop-through or default behavior, so the first matching line wins.  Also I commented out all other lines below "Put your actual configuration here" except the one that says
    local   all             postgres
  ...but see the postgresql docs if you have specific configuration needs outside of what OM requires.  The "host" lines are necessary even if you are only using OM from your own computer, because of how jdbc makes connections.  
    
- Restart postgresql (as root: "/etc/init.d/postgresql restart").

- Become the user postgres with this:
    su - postgres
  (SUGGESTION: add windows instructions; or other administrative account, if needed according to your postgresql installation's documentation).

- Choose a username and password.  If you use the same username as your system username, and leave a blank password, OM will log you in automatically.  If you choose a different username, or a strong password (which is a good idea sometimes), you will be prompted each time.  Note: You can change your password later on, after completing all below steps, then:  again become root; run the commands "su - postgres", "psql om_<yourusername>" (substituting your username for the "<...>", removing the <>'s), and "\password <newpassword>" similarly; then follow the prompts to enter the new password twice, then "exit" twice (as below) only if you have nothing else to do to postgresql at that time.

- Create the database with this command (substituting your username for the "<...>", removing the <>'s):
    createdb om_<yourusername>

- run psql (the postgresql administrative application) like this:
    psql om_<yourusername>
  ...and you should see a prompt, something like this:
    $psql om_<yourusername>
    psql (9.1.9)
    Type "help" for help.
    om_<yourusername>=# 

- At the prompt, run this command (substituting your username & password for the "<...>"'s, removing the <>'s, but *do keep* the single-quotes (') and the semicolon ";"):
    create role <yourusername> with createdb login encrypted password '<putYourPasswordHere>';
  ... but don't use any apostrophes, aka single-ticks or single-quotes, inside your provided password, because it should only be surrounded by them).   Note it is NOT "create role om_<yourusername>"; the om_ is just the databasename inside postgresql.
  
  (DEVELOPERS: during development or testing it might be convenient to use a blank password as described above under "Choose a username and password", to avoid typing a longer password repeatedly, until you use real data; it can be changed with postgresql commands as per that documentation, or you can set up a separate db/user/password combination for "real" data.)

- Run this command (with the semicolon):
    create role testrunner with createdb login encrypted password 'testrunner';
  ...which is to enable unit tests.

- Run this command (with the semicolon):
    create extension lo;
  ...which is to enable large objects support (ie to allow putting documents or other files in the database).

- Run 
    \q
  ...(and Enter) to exit psql.

- Still as the postgres user, run the command:
    createdb om_testrunner -O testrunner
  ...which is also to enable unit tests.
  
- re-enter psql as before but in the om_testrunner database
    psql om_testrunner
  ...and in it run the command:
    create extension lo;
  ...and 
    \q 
  ...to exit psql again.

- Then run the command
    exit
  ... twice, to no longer be the postgres user or root.

The remaining database setup steps are performed by the OneModel application when it is launched under your own user account.

(We might make this setup easier if we build support for an alternative database, perhaps embedded, for a more automated installation. That at least requires implementing the Database interface and pass the same tests as the PostgreSQLDatabase class does.  Postgresql is very reliable and rich though, so it is a good default.  Or just create a tarball, or a .deb that does everything right so there's no problem w/ extra steps)


Verifying
---------
Developers in particular should, but anyone who has installed maven (under Compiling, above) can verify that the installation was successful by running
  mvn clean test
...or if you change any code then instead run
  mvn clean package
...then make sure that was successful and no tests report failure.


Running
-------
Just execute the jar with java.  An easy way is to go to the directory where it is installed (such as ~/onemodel), then use a command line similar to this for Linux/Unix:

  bin/om

...or for Windows (let me know if this works; feel free to fix it & send the pull request):

  bin\om.bat


Usage Tips
----------
There is no substitute for making regular backups of all data that matters to you.  (idea: fill in here the steps, or link to instructions, for a postgresql backup? or suggest to go find that?)

You'll almost certainly want to have a long scrollback buffer in your command window, for times when you just need to review the recent past, or there was an errant keystroke and you want to see what happened.

If it ever crashes, and you find you can't type anything at all on the command-line, on gnu/linux with the bash shell, you can run Ctrl-c then the 'reset' command (even if you can't see what you're typing) and that should fix it (by resetting the line editor at that bash prompt).

If you make some changes in subgroups, then ESCape back to a group which suddenly doesn't look right (has too few entries or something), then you can see the right entries by ESCaping from the incorrectly displayed group then going back into it.  It's an infrequent bug.  If you learn a way to reproduce it consistently, let me know.

Troubleshooting
---------------
Make sure you did everything above.  Triple-check it, really.

This happened once, only after a later postgresql version was installed without fully removing the old version first:  in postgresql.conf I had to change the port from 5433 to 5432.  It probably was set to 5433 on installation because I still had the config files on disk from the earlier installation, so it used the next available port.

Try running 'mvn clean'.  Or starting from scratch with the instructions.

It seems unlikely, but you might have to open port 5432 for postgresql on a firewall.

Whatever else you learn to fix, send a message or a pull request with the information.

If you're having problems with aspects (e.g., excessive debugging output, no debugging output, or error messages on launch about a missing method), then edit .aj files as needed, and you might have to run 'mvn clean' (to remove what was there), then run "mvn package" *twice* (to reinstate aspect code as written) for reasons not yet investigated.  The script /bin/c might make this convenient.  See the comments in the file 'pom.xml' for more info (search it for 'aspect').

If anyone works interactively with the same postgresql instance as is used for your OneModel installation, and OneModel seems to hang (freeze), see if someone has left a transaction uncommitted.

If something really annoying happens (due to some bug) and you can't get out, you can always ^C and go back in (and report what happened, exact details of all messages, and how to reproduce it).


Notes On Development Setup
--------------------------
I'm using IntelliJ again now instead of Eclipse, since I couldn't get some features to work with eclipse (of 2 scala files, in one of them things worked, in the other code completion, auto-formatting, most refactoring, and syntax error highlighting didn't work; couldn't run test files in the debugger, nor evaluate expressions.)  Seems to be much better.

How I got IntelliJ working for this project (no previous settings):
  Installed IntelliJ IDEA v. 13.1.5, already having OpenJDK 1.7, and launch it.
  
  Select "open new project" (NOT import, that had more problems)
    find the pom.xml file for OM, highlight, click OK
  
  Choose File,settings,plugins,(lowerRH button) Browse..., right-click scala (in list), choose dnload/install, close.
  
  Wait for installation to complete, then restart IntelliJ
  
  Go to File / project structure (like proj settings, ctrl+alt+shift+s), and:
    - fill in the JDK
    - add scala facet (click it, then +, ... dbl-click the proj name or whatever in dialog not just hit OK )
    - click 'Libs' on LH, then + to add lib dir from the scala installation directory
    - click 'Modules' on LH, then 'Paths' tab in center top, then make sure the radio button "Inherit project compile output path" is checked.
  
  Accept option to enable type-aware highlighting (or yelo/grn "[ ]" thing in lower RH status bar, or ctrl+shift+alt+E).
  
  Open some file like textui.scala.
  
  Right-click in the editor and choose mvn / reimport.
  
Notes on how I previously had Eclipse set up are in an older version of this file, in git.

CUSTOMIZE the IDE.  At least set tabs to spaces, size 2.

I put my typical mvn commands in scripts so I can invoke them from the command-line with just one or two letters; in bash that is always starting with the line "#!/bin/bash -eux", where the "-eu" is so the script will fail immediately on any errors instead of continuing in error.

If you still see errors/warnings that the IDE is not finding things in the path, confirm it works from the command-line ('mvn' commands found in INSTALLING) before you decide the project is broken. There's something different w/ your configuration.

I tried fsc but it was slower by 1/3 (15s in the ide) or got many compile errors (from CLI: "mvn clean scala:cc -Donce=true -Dfsc=true"); if you know why I'd like to hear.  Maybe it would work if switched from mvn to SBT.
