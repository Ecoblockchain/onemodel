Thanks for your interest in the OneModel project, whether as a consumer and/or contributor.  It is my great desire to help everyone do good things, by knowing what has the most worth and the best way to carry that out.


If you simply need other terms than those found in the file LICENSE, send a message to "licensing" and (to avoid address
harvesters next comes the) at, then onemodel.org, with subject "onemodel licensing".  Your message might be forwarded to a public list for discussion.


For code contributions and web site improvements, etc:  Please include in the *first* git commit comment of the first pull request (or equivalent), the following statement with your name inserted in the blank:
    "I, ______, certify that I am authorized without restriction to contribute this work to the OneModel project, and I assign to Luke A. Call all rights to this work.  Luke A. Call, by incorporating this work promises that it will immediately be made publicly available under the license agreement under which the project is generally made available at the time of this contribution.  I also understand that he may assign rights to other entities or release this work under other licenses in the future, as seems to him best for the good of this project and humankind as a whole, in his sole judgement as the rights holder.  Also, by making any future submissions of work to Luke A Call or his successors or assigns, for use in the OneModel project, I assert that they will be under these same terms, until I explicitly and clearly revoke this by message to them through channels similarly reliable, or others generally known to be reliable (among which are email to which I receive a notice of receipt in common form, or certified postal mail)."


WHY REQUIRE ASSIGNMENT OF RIGHTS:
- It is easier to defend the copyright of a work or make necessary legal changes etc, if there is a single entity holding rights.  Other projects have learned this.
- For the viability of the project, it needs flexibility for future changes as circumstances require, whether for dual licensing (what the FSF calls "selling exceptions") as a way to fund the project, or in case it becomes clearly necessary to move from the AGPL to an LGPL or BSD license, assign rights to a nonprofit, or other unanticipated requirements.
- I am not an attorney, I often personally resent long (nonstandard) legal agreements and avoid situations that require them, and just want us all to do the right thing.  So let's just all behave well and be helpful.  Maybe someday I'll be less naive and have to do things the hard way, but let's avoid that as long as possible, hopefully forever.
- I chose AGPL because with the amount of work in this, if someone enhances it for their own benefit, I'd like for everyone to get the benefit of the enhancements.  AGPL seems to provide the most benefit to the most people, which is the whole point.
- References:
  %%TODO: insert them here...
  And others.


OTHER WAYS TO HELP WITH THIS PROJECT: 
- bug reports with clear and simple instructions on how to reproduce the bug from the latest code
- web site improvements (see http://www.github.com/onemodel/onemodel-website)
- supporting other users on project mailing lists etc
- suggestions, constructive feedback
- create good data and share it, such as around maturity models of all kinds, or improve & extend the work of others.  (Note:  as of 2015-01, upcoming priorities include data sharing/cloud usage, mouse & mobile support, internal improvements, and other features.)
- money


KEEP IN MIND:
- I am / we are grateful for your participation!  If this project is useful to you, that's good!
- Search for the article "how to ask a question well" or some such, by Eric Raymond: very practical suggestions.
- Design reviews save time or avoid wasting time with an idea that can be readily improved with discussion.
- Failure isn't often failure, but how we learn and move forward.
- Not hearing back is not an insult, it's just that people are sometimes busy with many competing priorities.  You can wait a few weeks and try again, perhaps with revisions.
- It's usually best to mimic the code style, etc, that is already in place.
- Test well.  Consider the audience.  Be diligent at not introducing new bugs.  Consider testing more than one facet of the program, in more than one way.  Write tests, use it for a while, and make sure to test all lines changed or impacted.
- There is currently a way to configure aspectj inside OM to provide very much debugging output, if that helps; it's comparable to what "set -x" does in shell scripts.
- Please forgive faults of others; we'll all keep trying.
- etc

