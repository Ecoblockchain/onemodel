# convenience "quick compile/tests/jar/run" for onemodel code.  Not perfect, just meant to save time.

# next line replaces the one after which was first, so this will work with ksh or where bash has a different path (eg BSD)
set -eux
##!/bin/bash -eux

#    This file is part of OneModel, a program to manage knowledge.
#    Copyright in each year of 2013-2014 inclusive, Luke A Call; all rights reserved.
#    OneModel is free software, distributed under a license that includes honesty, the Golden Rule, guidelines around binary
#    distribution, and the GNU Affero General Public License as published by the Free Software Foundation, either version 3
#    of the License, or (at your option) any later version.  See the file LICENSE for details.
#    OneModel is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
#    You should have received a copy of the GNU Affero General Public License along with OneModel.  If not, see <http://www.gnu.org/licenses/>

# search pom.xml for 'aspect' for why there are two calls to mvn package here, if aspects changed.

# do the long way if we have aspectj changes:
if [[ $(uname -a|grep -i openbsd|wc -l) -eq 1 ]]; then
  STAT_CMD="stat -f %m"
else  
  STAT_CMD="stat -c %Y"
fi
JAR_DATE=0
DO_EXTRA_BUILD=false
if ls target/onemodel-*jar; then
  JAR_DATE=$($STAT_CMD target/onemodel-*jar)

  # (idea: should replace this loop w/ just a find cmd?)
  for ASPECT_FILE_DATE in $(find . -name "*.aj"|xargs -n 1 $STAT_CMD);  do
    if [[ $ASPECT_FILE_DATE -gt $JAR_DATE ]]; then
      # means we need to do the extra work for aspect changes to be picked up:
      DO_EXTRA_BUILD=true
      break
    fi
  done
else
  DO_EXTRA_BUILD=true
fi
if [[ "$DO_EXTRA_BUILD" == "true" ]]; then
  if which mvn-script-start; then 
    . mvn-script-start  # local convenience: if present could e.g. "set +e"
  fi
  CMD="nice mvn clean package -DskipTests=true"
  if which mvn-script-finish; then 
    $CMD
    # see above cmt; for ex: "RESULT=$?; set -e; if [[ $RESULT -ne 0 ]]; then beep; echo $RESULT; exit $RESULT; fi":
    . mvn-script-finish 
  else
    $CMD
  fi
fi

# then the normal work, but skip tests if tested files didn't change:
RUN_TESTS=true
if [[ $JAR_DATE -ne 0 ]]; then
  echo
  echo
  LATEST_FILE_DATE=0
  for SECONDS in $(find src|xargs -n 1 $STAT_CMD); do
    if [[ $LATEST_FILE_DATE -lt $SECONDS ]]; then 
      LATEST_FILE_DATE=$SECONDS
    fi
  done
  echo
  echo
  if [[ $LATEST_FILE_DATE -le $JAR_DATE ]]; then
    RUN_TESTS=false
  fi
fi

if [[ "$RUN_TESTS" == "true" ]]; then
  if which mvn-script-start; then 
    . mvn-script-start  # see cmt at earlier use
  fi
  if which mvn-script-finish; then 
    nice mvn package
    . mvn-script-finish  # see cmt at earlier use
  else
    nice mvn package
  fi
fi

if [[ $# -gt 0 && $1 == 'd' ]]; then
  om d
elif [[ $# -gt 0 && $1 == "skipapplaunch" ]]; then
  : #do nothing
else
  om
fi
